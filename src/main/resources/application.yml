micronaut:
  application:
    name: recce
database:
  host: localhost
  port: 9000
  name: db
  username: user
  password: password
datasources:
  default:
    url: jdbc:postgresql://${database.host}:${database.port}/${database.name}
    driverClassName: org.postgresql.Driver
    username: ${database.username}
    password: ${database.password}
    initialization-fail-timeout: 10000
    # Only need a small pool; as only should be required for migration during startup if we continue to use R2DBC
    maximum-pool-size: 2
    minimum-idle: 0
flyway:
  datasources:
    default:
      enabled: true
r2dbc:
  datasources:
    default:
      url: r2dbc:pool:postgresql://${database.host}:${database.port}/${database.name}
      username: ${database.username}
      password: ${database.password}
      options:
        maxSize: 10
        maxAcquireTime: PT60S
jackson:
  serialization:
    writeDatesAsTimestamps: false
reconciliation:
  # How many rows are bulk inserted/updated When bulk loading data from your source & target DBs into Recce's DB.
  # When loading target data, note that this represents an upper limit of each batch, since rows must be split into
  # updates (to an existing row's MigrationKey, loaded from the source) and inserts for rows that are missing in source.
  defaultBatchSize: 1000
  # Number of batches to potentially be saving in parallel when loading
  # This imposes an upper limit on the number of Recce DB connections an individual dataset's reconciliation
  # run can be using in order to batch-insert/save rows. Excessive batch concurrency relative to available DB connections
  # may lead to R2DBC connection pool exhaustion/waits, and push excessive load to your Recce DB. In other words,
  # increasing concurrency beyond `r2dbc.datasources.default.options.maxSize` is unlikely to increase overall speed.
  defaultBatchConcurrency: 5
  datasets:
#    my-data-set: # Name your datasets however you would like
#      source:
#        # Reference to a datasource defined in `r2dbc.datasources`
#        dataSourceRef: my-source-db
#        # Any SQL query to evaluate against the source DB
#        query: >
#          SELECT id as MigrationKey, * FROM my-table
#      target:
#        # Reference to a datasource defined in `r2dbc.datasources`
#        dataSourceRef: my-target-db
#        # Any SQL query to evaluate against the source DB
#        query: >
#          SELECT different_id as MigrationKey, * FROM my-table
#      # Optional strategy for determining equivalence of column values
#      hashingStrategy: TypeLenient
#      # Optional scheduling of regular or one-of reconciliations
#      schedule:
#        # Must adhere to format https://docs.micronaut.io/latest/api/io/micronaut/scheduling/cron/CronExpression.html
#        # or https://crontab.guru/ (without seconds)
#        cronExpression: 0 0 * * *
